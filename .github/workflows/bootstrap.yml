name: Terraform Bootstrap

on:
  push:
    paths:
      - 'bootstrap/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Determine Resource Names
        id: resource_names
        run: |
          # Set environment and prefix
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          PREFIX="neo4j-demos"
          
          # Construct resource names using the prefix and environment
          BUCKET_NAME="${PREFIX}-terraform-state-${ENV}"
          TABLE_NAME="${PREFIX}-terraform-locks-${ENV}"
          
          # Override with GitHub environment variables if they exist
          if [[ -n "${{ vars.TF_STATE_BUCKET }}" ]]; then
            BUCKET_NAME="${{ vars.TF_STATE_BUCKET }}"
          fi
          
          if [[ -n "${{ vars.TF_LOCK_TABLE }}" ]]; then
            TABLE_NAME="${{ vars.TF_LOCK_TABLE }}"
          fi
          
          # Set output variables
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "table_name=$TABLE_NAME" >> $GITHUB_OUTPUT
          
          echo "Using resource names:"
          echo "  - Bucket: $BUCKET_NAME"
          echo "  - Table: $TABLE_NAME"

      - name: Clean Up Existing Resources
        run: |
          BUCKET_NAME="${{ steps.resource_names.outputs.bucket_name }}"
          TABLE_NAME="${{ steps.resource_names.outputs.table_name }}"
          
          echo "Checking for existing resources..."
          
          # Check and delete S3 bucket if it exists
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Found existing bucket. Cleaning up..."
            aws s3 rm s3://$BUCKET_NAME --recursive
            aws s3api delete-bucket --bucket $BUCKET_NAME
            echo "Bucket deleted successfully"
          else
            echo "No existing bucket found"
          fi
          
          # Check and delete DynamoDB table if it exists
          if aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
            echo "Found existing table. Cleaning up..."
            aws dynamodb delete-table --table-name $TABLE_NAME
            aws dynamodb wait table-not-exists --table-name $TABLE_NAME
            echo "Table deleted successfully"
          else
            echo "No existing table found"
          fi

      - name: Terraform Init
        working-directory: bootstrap
        run: terraform init

      - name: Terraform Apply
        id: apply
        working-directory: bootstrap
        run: |
          # Apply terraform configuration
          terraform apply -auto-approve
          
          # Use the resource names from the earlier step
          BUCKET_NAME="${{ steps.resource_names.outputs.bucket_name }}"
          TABLE_NAME="${{ steps.resource_names.outputs.table_name }}"
          
          # Set the environment variables
          echo "TF_STATE_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=$TABLE_NAME" >> $GITHUB_ENV
      
      - name: Store Outputs in SSM
        run: |
          # Get environment
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          
          echo "Storing values in SSM for environment: $ENV"
          echo "  - Bucket name: $TF_STATE_BUCKET"
          echo "  - Table name: $TF_LOCK_TABLE"
          
          # Store in SSM with environment prefix
          aws ssm put-parameter --name "/terraform/$ENV/state_bucket" --value "$TF_STATE_BUCKET" --type "String" --overwrite
          aws ssm put-parameter --name "/terraform/$ENV/lock_table" --value "$TF_LOCK_TABLE" --type "String" --overwrite
          
          echo "Successfully stored Terraform outputs in SSM Parameter Store"