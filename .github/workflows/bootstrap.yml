name: Terraform Bootstrap

on:
  push:
    paths:
      - 'bootstrap/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: bootstrap
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: bootstrap
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        working-directory: bootstrap
        run: |
          terraform apply -auto-approve
          
          # Properly capture the outputs - this is the key fix
          BUCKET_NAME=$(terraform output -raw state_bucket_name || echo "")
          TABLE_NAME=$(terraform output -raw dynamodb_table_name || echo "")
          
          # Verify values were properly obtained
          echo "Captured bucket name: $BUCKET_NAME"
          echo "Captured table name: $TABLE_NAME"
          
          # Use correct format for GITHUB_ENV
          echo "TF_STATE_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=${TABLE_NAME}" >> $GITHUB_ENV

      - name: Store Outputs in SSM
        run: |
          # Verify values from environment variables
          echo "Using bucket name: $TF_STATE_BUCKET"
          echo "Using table name: $TF_LOCK_TABLE"
          
          # Store in SSM if values are not empty
          if [[ -n "$TF_STATE_BUCKET" ]]; then
            aws ssm put-parameter --name "/terraform/state_bucket" --value "$TF_STATE_BUCKET" --type "String" --overwrite
            echo "Stored bucket name in SSM"
          else
            echo "Warning: Empty bucket name, not storing in SSM"
          fi
          
          if [[ -n "$TF_LOCK_TABLE" ]]; then
            aws ssm put-parameter --name "/terraform/lock_table" --value "$TF_LOCK_TABLE" --type "String" --overwrite
            echo "Stored table name in SSM"
          else
            echo "Warning: Empty table name, not storing in SSM"
          fi