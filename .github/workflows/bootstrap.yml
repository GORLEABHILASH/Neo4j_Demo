name: Terraform Bootstrap

on:
  push:
    paths:
      - 'bootstrap/**'
  workflow_dispatch:

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Clean Up Existing Resources
        run: |
          # Define resource names
          BUCKET_NAME="neo4j-demos-terraform-state-dev"
          TABLE_NAME="neo4j-demos-terraform-locks-dev"
          
          echo "Checking for existing resources..."
          
          # Check and delete S3 bucket if it exists
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Found existing bucket. Cleaning up..."
            # Empty bucket first
            aws s3 rm s3://$BUCKET_NAME --recursive
            # Delete bucket
            aws s3api delete-bucket --bucket $BUCKET_NAME
            echo "Bucket deleted successfully"
          else
            echo "No existing bucket found"
          fi
          
          # Check and delete DynamoDB table if it exists
          if aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
            echo "Found existing table. Cleaning up..."
            aws dynamodb delete-table --table-name $TABLE_NAME
            # Wait for deletion to complete
            aws dynamodb wait table-not-exists --table-name $TABLE_NAME
            echo "Table deleted successfully"
          else
            echo "No existing table found"
          fi

      - name: Terraform Init
        working-directory: bootstrap
        run: terraform init

      - name: Terraform Apply
        id: apply
        working-directory: bootstrap
        run: |
          # Apply terraform configuration
          terraform apply -auto-approve
          
          # Direct approach - directly grep the output instead of using jq
          # This avoids the jq parsing error
          echo "Capturing Terraform outputs..."
          
          # Capture the raw output and extract values using grep/sed
          terraform output > terraform_output.txt
          
          # Extract values using grep and sed (more reliable than jq for malformed output)
          BUCKET_NAME=$(grep "state_bucket_name" terraform_output.txt | sed 's/state_bucket_name = "\(.*\)"/\1/')
          TABLE_NAME=$(grep "dynamodb_table_name" terraform_output.txt | sed 's/dynamodb_table_name = "\(.*\)"/\1/')
          
          # Trim whitespace
          BUCKET_NAME=$(echo "$BUCKET_NAME" | xargs)
          TABLE_NAME=$(echo "$TABLE_NAME" | xargs)
          
          echo "Extracted bucket name: $BUCKET_NAME"
          echo "Extracted table name: $TABLE_NAME"
          
          # Store in GitHub environment variables
          echo "TF_STATE_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=$TABLE_NAME" >> $GITHUB_ENV

      - name: Store Outputs in SSM
        run: |
          echo "Storing values in SSM:"
          echo "  - Bucket name: $TF_STATE_BUCKET"
          echo "  - Table name: $TF_LOCK_TABLE"
          
          # Store in SSM
          aws ssm put-parameter --name "/terraform/state_bucket" --value "$TF_STATE_BUCKET" --type "String" --overwrite
          aws ssm put-parameter --name "/terraform/lock_table" --value "$TF_LOCK_TABLE" --type "String" --overwrite
          
          echo "Successfully stored Terraform outputs in SSM Parameter Store"