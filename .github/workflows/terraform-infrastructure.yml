name: Terraform Infrastructure Deployment
on:
  push:
    paths:
      - 'Terraform/**'
  workflow_dispatch:
  workflow_run:
    workflows: ["Terraform Bootstrap"]
    types:
      - completed
jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          
      - name: Fetch Terraform Backend Details
        run: |
          TF_STATE_BUCKET=$(aws ssm get-parameter --name "/terraform/dev/state_bucket" --query "Parameter.Value" --output text)
          TF_LOCK_TABLE=$(aws ssm get-parameter --name "/terraform/dev/lock_table" --query "Parameter.Value" --output text)
          
          echo "Retrieved backend details:"
          echo "  - Bucket: $TF_STATE_BUCKET"
          echo "  - Table: $TF_LOCK_TABLE"
          
          echo "TF_STATE_BUCKET=$TF_STATE_BUCKET" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=$TF_LOCK_TABLE" >> $GITHUB_ENV
          
      - name: Terraform Init
        working-directory: Terraform
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="dynamodb_table=$TF_LOCK_TABLE" \
            -backend-config="region=${{ secrets.AWS_REGION || 'us-west-2' }}"
      
      - name: Import Existing Resources
        working-directory: Terraform
        continue-on-error: true
        run: |
          # Check if ECR repositories exist and import them
          echo "Checking for existing ECR repositories..."
          
          # Check and import neo4j-basic-demo
          if aws ecr describe-repositories --repository-names neo4j-basic-demo 2>/dev/null; then
            echo "Importing neo4j-basic-demo repository..."
            terraform import 'aws_ecr_repository.demo_repos["neo4j-basic-demo"]' neo4j-basic-demo || true
          fi
          
          # Check and import neo4j-social-network
          if aws ecr describe-repositories --repository-names neo4j-social-network 2>/dev/null; then
            echo "Importing neo4j-social-network repository..."
            terraform import 'aws_ecr_repository.demo_repos["neo4j-social-network"]' neo4j-social-network || true
          fi
          
          # Check and import neo4j-movie-recommendation
          if aws ecr describe-repositories --repository-names neo4j-movie-recommendation 2>/dev/null; then
            echo "Importing neo4j-movie-recommendation repository..."
            terraform import 'aws_ecr_repository.demo_repos["neo4j-movie-recommendation"]' neo4j-movie-recommendation || true
          fi
          
          # Check if KMS alias exists and import it
          echo "Checking for existing KMS alias..."
          if aws kms list-aliases --query "Aliases[?AliasName=='alias/eks/neo4j-demo-cluster']" | grep -q "alias/eks/neo4j-demo-cluster"; then
            echo "Importing KMS alias..."
            terraform import 'module.eks.module.kms.aws_kms_alias.this["cluster"]' alias/eks/neo4j-demo-cluster || true
          fi
            
      - name: Terraform Plan
        working-directory: Terraform
        run: terraform plan -out=tfplan
        
      - name: Terraform Apply
        working-directory: Terraform
        run: terraform apply -auto-approve tfplan