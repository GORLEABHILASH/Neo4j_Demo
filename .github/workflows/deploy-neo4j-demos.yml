name: Build and Deploy Neo4j Demos

on:
  push:
    branches: [main]
    paths:
      - 'demos/**'
      - '.github/workflows/deploy-neo4j-demos.yml'
  pull_request:
    branches: [main]
    paths:
      - 'demos/**'
  workflow_dispatch:
    inputs:
      demo_name:
        description: 'Demo application name to deploy (leave empty for all demos)'
        required: false
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_all:
        description: 'Deploy all demos'
        required: false
        default: false
        type: boolean

jobs:
  determine-demos:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine demos to deploy
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.deploy_all }}" == "true" ]]; then
            # Deploy all demos
            DEMOS=$(ls -1 demos/ | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "matrix={\"demo\":$DEMOS}" >> $GITHUB_OUTPUT
          elif [[ -n "${{ github.event.inputs.demo_name }}" ]]; then
            # Deploy specified demo
            echo "matrix={\"demo\":[\"${{ github.event.inputs.demo_name }}\"]}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            # Find changed demos
            BEFORE_SHA=${{ github.event.before || 'HEAD~1' }}
            CURRENT_SHA=${{ github.sha }}
            CHANGED_DEMOS=$(git diff --name-only $BEFORE_SHA $CURRENT_SHA | grep "^demos/" | cut -d/ -f2 | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "matrix={\"demo\":$CHANGED_DEMOS}" >> $GITHUB_OUTPUT
          else
            # Default to empty if somehow nothing is selected
            echo "matrix={\"demo\":[]}" >> $GITHUB_OUTPUT
          fi
          
          # Output the demos for logs
          echo "Demos to deploy: $(echo $matrix | jq -c '.demo')"

  build-and-push:
    needs: determine-demos
    if: ${{ fromJson(needs.determine-demos.outputs.matrix).demo[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.determine-demos.outputs.matrix) }}
      fail-fast: false
    env:
      AWS_REGION: us-west-2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'demos/${{ matrix.demo }}/package-lock.json'

      - name: Install dependencies
        working-directory: demos/${{ matrix.demo }}
        run: npm ci
      
      - name: Build application
        working-directory: demos/${{ matrix.demo }}
        run: npm run build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set environment & tag
        run: |
          DEPLOY_ENV="${{ github.event.inputs.environment || 'dev' }}"
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}-$(date +%s)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_PREFIX=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          
      - name: Build, tag, and push image
        working-directory: demos/${{ matrix.demo }}
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.IMAGE_TAG }}
          
          # Tag as latest for the specific environment
          docker tag ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.DEPLOY_ENV }}-latest
          docker push ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.DEPLOY_ENV }}-latest
  
  deploy:
    needs: [determine-demos, build-and-push]
    if: ${{ fromJson(needs.determine-demos.outputs.matrix).demo[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.determine-demos.outputs.matrix) }}
      fail-fast: false
    env:
      AWS_REGION: us-west-2
      CLUSTER_NAME: neo4j-demo-cluster
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set environment variables
        run: |
          DEPLOY_ENV="${{ github.event.inputs.environment || 'dev' }}"
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}-$(date +%s)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_PREFIX=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Install yq for YAML processing
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.30.8/yq_linux_amd64
          chmod +x /usr/local/bin/yq
      
      - name: Generate Kubernetes manifests
        run: |
          # Get configuration from parameter store
          DOMAIN_NAME=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/domain-name" --query "Parameter.Value" --output text)
          NEO4J_VERSION=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/neo4j-version" --query "Parameter.Value" --output text)
          NEO4J_PASSWORD=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/neo4j-password" --with-decryption --query "Parameter.Value" --output text)
          REPLICAS=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/app-replicas" --query "Parameter.Value" --output text)
          
          # Prepare Neo4j auth base64
          NEO4J_AUTH_BASE64=$(echo -n "neo4j/${NEO4J_PASSWORD}" | base64 -w 0)
          
          # Create namespace if it doesn't exist
          kubectl create namespace ${{ matrix.demo }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Generate manifest directory
          mkdir -p generated-manifests
          
          # Process Neo4j template
          cat deployment/neo4j-template.yaml | \
          sed "s/{{DEMO_NAME}}/${{ matrix.demo }}/g" | \
          sed "s/{{NEO4J_VERSION}}/${NEO4J_VERSION}/g" | \
          sed "s/{{NEO4J_AUTH_BASE64}}/${NEO4J_AUTH_BASE64}/g" > generated-manifests/neo4j-${{ matrix.demo }}.yaml
          
          # Process demo app template
          cat deployment/demo-app-template.yaml | \
          sed "s/{{DEMO_NAME}}/${{ matrix.demo }}/g" | \
          sed "s/{{REPLICAS}}/${REPLICAS}/g" | \
          sed "s|{{ECR_REPO_URL}}|${{ env.ECR_REPOSITORY_PREFIX }}|g" | \
          sed "s/{{IMAGE_TAG}}/${{ env.IMAGE_TAG }}/g" | \
          sed "s/{{ENVIRONMENT}}/${{ env.DEPLOY_ENV }}/g" | \
          sed "s/{{DOMAIN_NAME}}/${DOMAIN_NAME}/g" > generated-manifests/app-${{ matrix.demo }}.yaml
      
      - name: Deploy to Kubernetes
        run: |
          # Apply Neo4j first
          kubectl apply -f generated-manifests/neo4j-${{ matrix.demo }}.yaml
          
          # Wait for Neo4j to be ready before deploying the app
          echo "Waiting for Neo4j to start..."
          kubectl rollout status statefulset/neo4j -n ${{ matrix.demo }} --timeout=5m
          
          # Apply demo app
          kubectl apply -f generated-manifests/app-${{ matrix.demo }}.yaml
          
          # Update deployment record in DynamoDB
          aws dynamodb put-item \
            --table-name neo4j-demo-deployments \
            --item '{
              "demo_id": {"S": "${{ matrix.demo }}"},
              "version": {"S": "${{ env.IMAGE_TAG }}"},
              "environment": {"S": "${{ env.DEPLOY_ENV }}"},
              "deployment_time": {"S": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"},
              "deployed_by": {"S": "${{ github.actor }}"},
              "commit_sha": {"S": "${{ github.sha }}"}
            }'
      
      - name: Verify deployment
        run: |
          echo "Waiting for application deployment to complete..."
          kubectl rollout status deployment/${{ matrix.demo }}-app -n ${{ matrix.demo }} --timeout=5m
          
          DOMAIN_NAME=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/domain-name" --query "Parameter.Value" --output text)
          echo "Deployment successful! Application should be available at: https://${{ matrix.demo }}.$DOMAIN_NAME"
          
          # Get service endpoints for logs
          echo "Service endpoints:"
          kubectl get ingress -n ${{ matrix.demo }} -o wide
