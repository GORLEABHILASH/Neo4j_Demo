name: Build and Deploy Neo4j Demos

on:
  push:
    branches: [main]
    paths:
      - 'demos/**'
      - '.github/workflows/deploy-neo4j-demos.yml'
  pull_request:
    branches: [main]
    paths:
      - 'demos/**'
  workflow_dispatch:
    inputs:
      demo_name:
        description: 'Demo application name to deploy (leave empty for all demos)'
        required: false
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_all:
        description: 'Deploy all demos'
        required: false
        default: false
        type: boolean

jobs:
  determine-demos:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine demos to deploy
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.deploy_all }}" == "true" ]]; then
            # Deploy all demos
            DEMOS=$(ls -1 demos/ | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "matrix={\"demo\":$DEMOS}" >> $GITHUB_OUTPUT
          elif [[ -n "${{ github.event.inputs.demo_name }}" ]]; then
            # Deploy specified demo
            echo "matrix={\"demo\":[\"${{ github.event.inputs.demo_name }}\"]}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            # Find changed demos
            BEFORE_SHA=${{ github.event.before || 'HEAD~1' }}
            CURRENT_SHA=${{ github.sha }}
            CHANGED_DEMOS=$(git diff --name-only $BEFORE_SHA $CURRENT_SHA | grep "^demos/" | cut -d/ -f2 | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "matrix={\"demo\":$CHANGED_DEMOS}" >> $GITHUB_OUTPUT
          else
            # Default to empty if somehow nothing is selected
            echo "matrix={\"demo\":[]}" >> $GITHUB_OUTPUT
          fi
          
          # Output the demos for logs
          echo "Selected demos to deploy: $(echo $matrix | jq -c '.demo')"
          echo "Matrix JSON: ${{ steps.set-matrix.outputs.matrix }}"

  build-and-push:
    needs: determine-demos
    if: ${{ fromJson(needs.determine-demos.outputs.matrix).demo[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.determine-demos.outputs.matrix) }}
      fail-fast: false
    env:
      AWS_REGION: us-west-2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'demos/${{ matrix.demo }}/package-lock.json'

      - name: Install dependencies
        working-directory: demos/${{ matrix.demo }}
        run: npm ci
      
      - name: Build application
        working-directory: demos/${{ matrix.demo }}
        run: npm run build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set environment & tag
        run: |
          DEPLOY_ENV="${{ github.event.inputs.environment || 'dev' }}"
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}-$(date +%s)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_PREFIX=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          
      - name: Build, tag, and push image
        working-directory: demos/${{ matrix.demo }}
        run: |
          # Make sure ECR repository exists
          aws ecr describe-repositories --repository-names ${{ matrix.demo }} || aws ecr create-repository --repository-name ${{ matrix.demo }}
          
          docker build -t ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.IMAGE_TAG }}
          
          # Tag as latest for the specific environment
          docker tag ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.DEPLOY_ENV }}-latest
          docker push ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.demo }}:${{ env.DEPLOY_ENV }}-latest
  
  deploy:
    needs: [determine-demos, build-and-push]
    if: ${{ fromJson(needs.determine-demos.outputs.matrix).demo[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.determine-demos.outputs.matrix) }}
      fail-fast: false
    env:
      AWS_REGION: us-west-2
      CLUSTER_NAME: neo4j-demo-cluster
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set environment variables
        run: |
          DEPLOY_ENV="${{ github.event.inputs.environment || 'dev' }}"
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}-$(date +%s)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_PREFIX=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
      - name: Create K8s template directories
        run: |
          mkdir -p deployment
          mkdir -p generated-manifests
      
      - name: Create Neo4j template
        run: |
          # Creating the Neo4j template file
          cat > deployment/neo4j-template.yaml << 'EOFNEO'
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{DEMO_NAME}}
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: neo4j-conf
            namespace: {{DEMO_NAME}}
          data:
            neo4j.conf: |
              dbms.memory.heap.initial_size=512m
              dbms.memory.heap.max_size=1G
              dbms.memory.pagecache.size=512M
              dbms.default_listen_address=0.0.0.0
              dbms.connector.bolt.listen_address=0.0.0.0:7687
              dbms.connector.http.listen_address=0.0.0.0:7474
              dbms.connector.https.listen_address=0.0.0.0:7473
              dbms.security.auth_enabled=true
              dbms.directories.import=/var/lib/neo4j/import
              dbms.allow_upgrade=true
          ---
          apiVersion: apps/v1
          kind: StatefulSet
          metadata:
            name: neo4j
            namespace: {{DEMO_NAME}}
          spec:
            serviceName: neo4j
            replicas: 1
            selector:
              matchLabels:
                app: neo4j
                demo: {{DEMO_NAME}}
            template:
              metadata:
                labels:
                  app: neo4j
                  demo: {{DEMO_NAME}}
              spec:
                containers:
                - name: neo4j
                  image: neo4j:{{NEO4J_VERSION}}
                  imagePullPolicy: IfNotPresent
                  ports:
                  - containerPort: 7474
                    name: http
                  - containerPort: 7687
                    name: bolt
                  env:
                  - name: NEO4J_AUTH
                    valueFrom:
                      secretKeyRef:
                        name: neo4j-secrets
                        key: neo4j-auth
                  - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
                    value: "yes"
                  volumeMounts:
                  - name: data
                    mountPath: /data
                  - name: conf
                    mountPath: /conf
                  resources:
                    requests:
                      cpu: "0.1"
                      memory: "256Mi"
                    limits:
                      cpu: "0.5"
                      memory: "512Mi"
                  livenessProbe:
                    tcpSocket:
                      port: 7687
                    initialDelaySeconds: 90
                    timeoutSeconds: 10
                    periodSeconds: 10
                  readinessProbe:
                    tcpSocket:
                      port: 7687
                    initialDelaySeconds: 60
                    timeoutSeconds: 10
                    periodSeconds: 10
                volumes:
                - name: conf
                  configMap:
                    name: neo4j-conf
                - name: data
                  emptyDir: {}  # Using emptyDir instead of PVC for testing
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: neo4j
            namespace: {{DEMO_NAME}}
          spec:
            selector:
              app: neo4j
              demo: {{DEMO_NAME}}
            ports:
            - name: http
              port: 7474
              targetPort: 7474
            - name: bolt
              port: 7687
              targetPort: 7687
            type: ClusterIP
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: neo4j-secrets
            namespace: {{DEMO_NAME}}
          type: Opaque
          data:
            neo4j-auth: {{NEO4J_AUTH_BASE64}}
            neo4j-password: {{NEO4J_PASSWORD_BASE64}}
          EOFNEO
      
      - name: Create Demo App template
        run: |
          # Creating the Demo App template file
          cat > deployment/demo-app-template.yaml << 'EOFAPP'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: {{DEMO_NAME}}-app
            namespace: {{DEMO_NAME}}
          spec:
            replicas: {{REPLICAS}}
            selector:
              matchLabels:
                app: {{DEMO_NAME}}-app
            template:
              metadata:
                labels:
                  app: {{DEMO_NAME}}-app
              spec:
                containers:
                - name: {{DEMO_NAME}}-app
                  image: {{ECR_REPO_URL}}/{{DEMO_NAME}}:{{IMAGE_TAG}}
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8080
                    name: http
                  env:
                  - name: NEO4J_URI
                    value: bolt://neo4j:7687
                  - name: NEO4J_USER
                    value: neo4j
                  - name: NEO4J_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: neo4j-secrets
                        key: neo4j-password
                  - name: DEMO_ENV
                    value: {{ENVIRONMENT}}
                  resources:
                    requests:
                      cpu: "0.2"
                      memory: "256Mi"
                    limits:
                      cpu: "0.5"
                      memory: "512Mi"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 60
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: {{DEMO_NAME}}-app
            namespace: {{DEMO_NAME}}
          spec:
            selector:
              app: {{DEMO_NAME}}-app
            ports:
            - name: http
              port: 80
              targetPort: 8080
            type: ClusterIP
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: {{DEMO_NAME}}-ingress
            namespace: {{DEMO_NAME}}
            annotations:
              kubernetes.io/ingress.class: alb
              alb.ingress.kubernetes.io/scheme: internet-facing
              alb.ingress.kubernetes.io/target-type: ip
              alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
              alb.ingress.kubernetes.io/ssl-redirect: "443"
              external-dns.alpha.kubernetes.io/hostname: {{DEMO_NAME}}.{{DOMAIN_NAME}}
          spec:
            rules:
            - host: {{DEMO_NAME}}.{{DOMAIN_NAME}}
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: {{DEMO_NAME}}-app
                      port:
                        name: http
          EOFAPP
      
      - name: Generate Kubernetes manifests
        run: |
          # Get configuration from parameter store
          DOMAIN_NAME=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/domain-name" --query "Parameter.Value" --output text || echo "neo4j-demos.example.com")
          NEO4J_VERSION=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/neo4j-version" --query "Parameter.Value" --output text || echo "4.4")
          NEO4J_PASSWORD=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/neo4j-password" --with-decryption --query "Parameter.Value" --output text || echo "password")
          REPLICAS=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/app-replicas" --query "Parameter.Value" --output text || echo "1")
          
          # Prepare Neo4j auth and password base64
          NEO4J_AUTH_BASE64=$(echo -n "neo4j/${NEO4J_PASSWORD}" | base64 -w 0)
          NEO4J_PASSWORD_BASE64=$(echo -n "${NEO4J_PASSWORD}" | base64 -w 0)
          
          # Create namespace if it doesn't exist
          kubectl create namespace ${{ matrix.demo }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Process Neo4j template
          cat deployment/neo4j-template.yaml | \
          sed "s/{{DEMO_NAME}}/${{ matrix.demo }}/g" | \
          sed "s/{{NEO4J_VERSION}}/${NEO4J_VERSION}/g" | \
          sed "s/{{NEO4J_AUTH_BASE64}}/${NEO4J_AUTH_BASE64}/g" | \
          sed "s/{{NEO4J_PASSWORD_BASE64}}/${NEO4J_PASSWORD_BASE64}/g" > generated-manifests/neo4j-${{ matrix.demo }}.yaml
          
          # Process demo app template
          cat deployment/demo-app-template.yaml | \
          sed "s/{{DEMO_NAME}}/${{ matrix.demo }}/g" | \
          sed "s/{{REPLICAS}}/${REPLICAS}/g" | \
          sed "s|{{ECR_REPO_URL}}|${{ env.ECR_REPOSITORY_PREFIX }}|g" | \
          sed "s/{{IMAGE_TAG}}/${{ env.IMAGE_TAG }}/g" | \
          sed "s/{{ENVIRONMENT}}/${{ env.DEPLOY_ENV }}/g" | \
          sed "s/{{DOMAIN_NAME}}/${DOMAIN_NAME}/g" > generated-manifests/app-${{ matrix.demo }}.yaml
          
          # Debug - Print the generated manifest content
          echo "Generated Neo4j manifest:"
          cat generated-manifests/neo4j-${{ matrix.demo }}.yaml
          
          echo "Generated app manifest:"
          cat generated-manifests/app-${{ matrix.demo }}.yaml
      
      - name: Deploy Neo4j
        run: |
          # Check if the StatefulSet already exists
          if kubectl get statefulset neo4j -n ${{ matrix.demo }} &>/dev/null; then
            echo "StatefulSet already exists. Deleting it first to allow changes..."
            kubectl delete statefulset neo4j -n ${{ matrix.demo }} --cascade=orphan
            echo "Waiting for StatefulSet to be deleted..."
            kubectl wait --for=delete statefulset/neo4j -n ${{ matrix.demo }} --timeout=2m || true
          fi
          
          # Apply Neo4j
          kubectl apply -f generated-manifests/neo4j-${{ matrix.demo }}.yaml
          
          # Debug - check Neo4j pod status
          echo "Checking initial Neo4j pod status..."
          kubectl get pods -n ${{ matrix.demo }} -l app=neo4j -o wide
          
          # Wait for Neo4j to be ready before deploying the app
          echo "Waiting for Neo4j to start..."
          kubectl rollout status statefulset/neo4j -n ${{ matrix.demo }} --timeout=8m || true
          
          # Debug - If Neo4j isn't ready, get more information
          if ! kubectl get pods -n ${{ matrix.demo }} -l app=neo4j | grep -q "1/1"; then
            echo "Neo4j pod is not ready. Getting more details..."
            kubectl describe pod -l app=neo4j -n ${{ matrix.demo }}
            kubectl logs -l app=neo4j -n ${{ matrix.demo }} --tail=100
          fi
          
          # Proceed with app deployment anyway
          echo "Proceeding with demo app deployment..."
      
      - name: Deploy demo app
        run: |
          # Apply demo app
          kubectl apply -f generated-manifests/app-${{ matrix.demo }}.yaml
          
          # Update deployment record in DynamoDB (if table exists)
          aws dynamodb describe-table --table-name neo4j-demo-deployments >/dev/null 2>&1 && \
          aws dynamodb put-item \
            --table-name neo4j-demo-deployments \
            --item '{
              "demo_id": {"S": "${{ matrix.demo }}"},
              "version": {"S": "${{ env.IMAGE_TAG }}"},
              "environment": {"S": "${{ env.DEPLOY_ENV }}"},
              "deployment_time": {"S": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"},
              "deployed_by": {"S": "${{ github.actor }}"},
              "commit_sha": {"S": "${{ github.sha }}"}
            }' || echo "DynamoDB table does not exist, skipping deployment record."
      
      - name: Verify deployment
        run: |
          echo "Waiting for application deployment to complete..."
          kubectl rollout status deployment/${{ matrix.demo }}-app -n ${{ matrix.demo }} --timeout=5m || true
          
          echo "Current pod status:"
          kubectl get pods -n ${{ matrix.demo }}
          
          DOMAIN_NAME=$(aws ssm get-parameter --name "/neo4j-demos/${{ env.DEPLOY_ENV }}/domain-name" --query "Parameter.Value" --output text || echo "neo4j-demos.example.com")
          echo "Deployment completed! Application should be available at: https://${{ matrix.demo }}.$DOMAIN_NAME"
          
          # Get service endpoints for logs
          echo "Service endpoints:"
          kubectl get ingress,svc -n ${{ matrix.demo }} -o wide || echo "No ingress found"
